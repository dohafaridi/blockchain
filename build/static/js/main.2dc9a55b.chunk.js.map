{"version":3,"sources":["components/Sidebar/Sidebar.jsx","actions/transactions.js","helpers.js","constants.js","components/Transactions/TransactionsContainer.jsx","reducers/transactions.js","reducers/index.js","store/currentStore.js","store/configureStore.js","hoc/storeProvider.js","App.js","serviceWorker.js","index.js"],"names":["Sidebar","react_default","a","createElement","className","href","title","fetchTransactions","dispatch","url","fetch","then","response","json","transactions","type","getTransactions","TransactionsContainer","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","nextProps","console","log","Component","connect","state","initialState","data","transactionsReducer","arguments","length","undefined","action","combineReducers","currentStore","createStore","reducers","applyMiddleware","thunk","configureStore","storeProvider","es","store","components_Sidebar_Sidebar","Transactions_TransactionsContainer","React","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2dc9a55b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./SideBar.css\";\r\n\r\nconst Sidebar = () => (\r\n  <div className=\"Sidebar\">\r\n    <h1 className=\"Sidebar__tilte\">FINPAL</h1>\r\n    <ul className=\"Sidebar__menu\">\r\n      <li>\r\n        <a href=\"#\" title=\"Overview\">\r\n          Overview\r\n        </a>\r\n      </li>\r\n      <li>\r\n        <a href=\"#\" title=\"Transactions\">\r\n          Transactions\r\n        </a>\r\n      </li>\r\n      <li className=\"Sidebar__menu--line\"></li>\r\n      <li>\r\n        <a href=\"#\" title=\"Transfers\">\r\n          Transfers\r\n        </a>\r\n      </li>\r\n      <li>\r\n        <a href=\"#\" title=\"Invoices\">\r\n          Invoices\r\n        </a>\r\n      </li>\r\n      <li className=\"Sidebar__menu--line\"></li>\r\n      <li>\r\n        <a href=\"#\" title=\"Manage cards\">\r\n          Manage cards\r\n        </a>\r\n      </li>\r\n      <li>\r\n        <a href=\"#\" title=\"Manage account\">\r\n          Manage account\r\n        </a>\r\n      </li>\r\n      <li className=\"Sidebar__menu--line\"></li>\r\n      <li>\r\n        <a href=\"#\" title=\"Team\">\r\n          Team\r\n        </a>\r\n      </li>\r\n      <li>\r\n        <a href=\"#\" title=\"Intergration\">\r\n          Intergration\r\n        </a>\r\n      </li>\r\n      <li>\r\n        <a href=\"#\" title=\"Settings\">\r\n          Settings\r\n        </a>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n);\r\n\r\nexport default Sidebar;\r\n","import { fetchJson } from \"../helpers\";\r\nimport { TRANSACTIONS_JSON_URL } from \"../constants\";\r\n\r\nexport const GET_TRANSACTIONS = \"GET_TRANSACTIONS\";\r\n\r\nexport const getTransactions = transactions => ({\r\n  type: GET_TRANSACTIONS,\r\n  transactions\r\n});\r\n\r\nexport const fetchTransactions = () => dispatch =>\r\n  fetchJson(TRANSACTIONS_JSON_URL).then(transactions => dispatch(getTransactions(transactions)));\r\n","const jsonNoCacheOptions = {\r\n  mode: \"no-origin\",\r\n  headers: {\r\n    Accept: \"application/json\",\r\n    \"Cache-Control\": \"no-cache\"\r\n  }\r\n};\r\n\r\n/**\r\n * Fetch a JSON from a URL.\r\n *\r\n * @example\r\n * fetchJson('/foo/bar').then(json => console.log(json));\r\n *\r\n * @param {String} url - The source URL of the JSON\r\n * @return {Promise} - A promise with the data content\r\n */\r\nexport const fetchJson = url =>\r\n  fetch(url).then(response => response.json());\r\n","export const TRANSACTIONS_JSON_URL = \"http://private-3f9656-paymiuminterviews.apiary-mock.com/transactions\";\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Transactions from \"./Transactions\";\r\nimport TransactionsDetail from \"../TransactionsDetail/TransactionsDetail\";\r\nimport { fetchTransactions } from \"../../actions/transactions\";\r\n\r\nclass TransactionsContainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.dispatch(fetchTransactions());\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {}\r\n\r\n  render() {\r\n    const transactions = [];\r\n    console.log(this.props.transactions);\r\n    return null;\r\n    return (\r\n      <div>\r\n        <Transactions transactions={transactions} />\r\n        <TransactionsDetail transactions={transactions} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  transactions: state.transactions\r\n});\r\n\r\nexport default connect(mapStateToProps)(TransactionsContainer);\r\n","import { GET_TRANSACTIONS } from \"../actions/transactions\";\r\n\r\nconst initialState = {\r\n  data: []\r\n};\r\n\r\nconst transactionsReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_TRANSACTIONS:\r\n      return {\r\n        data: action.transactions\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default transactionsReducer;\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport transactions from \"./transactions\";\r\n\r\nexport default combineReducers({\r\n  transactions\r\n});\r\n","import configureStore from \"./configureStore\";\r\n\r\nconst initialState = {};\r\n\r\n// The instance of the current store shared in the application.\r\nconst currentStore = configureStore(initialState);\r\n\r\nexport default currentStore;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport reducers from \"../reducers/index\";\r\n\r\nconst configureStore = (initialState = {}) =>\r\n  createStore(reducers, initialState, applyMiddleware(thunk));\r\n\r\nexport default configureStore;\r\n","import React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport currentStore from \"../store/currentStore\";\r\n\r\nconst storeProvider = Component => (\r\n  <Provider store={currentStore}>\r\n    <Component />\r\n  </Provider>\r\n);\r\n\r\nexport default storeProvider;\r\n","import React from \"react\";\n\nimport Sidebar from \"./components/Sidebar\";\nimport Transactions from \"./components/Transactions\";\n\nimport storeProvider from \"./hoc/storeProvider\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Sidebar />\n        <Transactions />\n      </div>\n    );\n  }\n}\n\nexport default storeProvider(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(App, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}