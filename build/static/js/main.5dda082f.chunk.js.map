{"version":3,"sources":["components/Header/Header.jsx","components/Sidebar/Sidebar.jsx","components/Transactions/Transactions.jsx","helpers.js","actions/transactions.js","constants.js","components/Transactions/TransactionsContainer.jsx","components/TransactionsDetail/TransactionsDetail.jsx","reducers/transactions.js","reducers/transactionsDetail.js","reducers/index.js","store/currentStore.js","store/configureStore.js","hoc/storeProvider.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Sidebar","title","href","tableOptions","defaultSortName","defaultSortOrder","Transactions","_ref","transactions","onSelectOptions","lib","data","options","selectRow","dataField","dataSort","isKey","jsonNoCacheOptions","mode","headers","Accept","Cache-Control","getTransactions","type","fetchTransactions","dispatch","url","fetch","then","response","json","TransactionsContainer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleRowSelection","bind","assertThisInitialized","fetchTransactionsFromLocalMock","row","getSelectedTransactions","components_Transactions_Transactions","clickToSelect","onSelect","Component","connect","state","selectedTransactions","TransactionsDetail","nextProps","setState","concat","toConsumableArray","TransactionsDetailComponent","id","map","transaction","key","initialState","transactionsReducer","arguments","length","undefined","action","transactionsDetailReducer","combineReducers","currentStore","createStore","reducers","applyMiddleware","thunk","configureStore","storeProvider","es","store","components_Header_Header","components_Sidebar_Sidebar","Transactions_TransactionsContainer","components_TransactionsDetail_TransactionsDetail","React","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5dda082f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./Header.css\";\r\n\r\nconst Header = () => (\r\n  <div className=\"Header\">\r\n    <div className=\"Header_item Header_item-logo\">\r\n      <h1>FINPAL</h1>\r\n    </div>\r\n    <div className=\"Header_item\" />\r\n    <div className=\"Header_item\" />\r\n  </div>\r\n);\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nimport \"./SideBar.css\";\r\n\r\nconst Sidebar = () => (\r\n  <div className=\"Sidebar\">\r\n    <ul className=\"Sidebar__menu\">\r\n      <li>\r\n        <a title=\"Overview\">Overview</a>\r\n      </li>\r\n      <li>\r\n        <a href=\"#\" title=\"Transactions\">\r\n          Transactions\r\n        </a>\r\n      </li>\r\n      <li className=\"Sidebar__menu--line\" />\r\n      <li>\r\n        <a title=\"Transfers\">Transfers</a>\r\n      </li>\r\n      <li>\r\n        <a title=\"Invoices\">Invoices</a>\r\n      </li>\r\n      <li className=\"Sidebar__menu--line\" />\r\n      <li>\r\n        <a title=\"Manage cards\">Manage cards</a>\r\n      </li>\r\n      <li>\r\n        <a title=\"Manage account\">Manage account</a>\r\n      </li>\r\n      <li className=\"Sidebar__menu--line\" />\r\n      <li>\r\n        <a title=\"Team\">Team</a>\r\n      </li>\r\n      <li>\r\n        <a title=\"Intergration\">Intergration</a>\r\n      </li>\r\n      <li>\r\n        <a title=\"Settings\">Settings</a>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n);\r\n\r\nexport default Sidebar;\r\n","import React from \"react\";\r\nimport { BootstrapTable, TableHeaderColumn } from \"react-bootstrap-table\";\r\n\r\nimport \"./Transactions.css\";\r\n\r\nconst tableOptions = {\r\n  defaultSortName: \"created_at\", // default sort column name\r\n  defaultSortOrder: \"desc\" // default sort order\r\n};\r\n\r\nconst Transactions = ({ transactions, onSelectOptions }) => {\r\n  return transactions ? (\r\n    <div className=\"Transactions\">\r\n      <BootstrapTable\r\n        data={transactions}\r\n        options={tableOptions}\r\n        selectRow={onSelectOptions}\r\n      >\r\n        <TableHeaderColumn dataField=\"created_at\" dataSort isKey>\r\n          DD-MM-YYYY\r\n        </TableHeaderColumn>\r\n        <TableHeaderColumn dataField=\"counterparty_name\" dataSort>\r\n          Counterparty Name\r\n        </TableHeaderColumn>\r\n        <TableHeaderColumn dataField=\"operation_type\" dataSort>\r\n          Payement Type\r\n        </TableHeaderColumn>\r\n        <TableHeaderColumn dataField=\"amount\" dataSort>\r\n          Amount\r\n        </TableHeaderColumn>\r\n        <TableHeaderColumn dataField=\"operation_type\">A</TableHeaderColumn>\r\n      </BootstrapTable>\r\n    </div>\r\n  ) : (\r\n    <div className=\"Transactions\"> There is no transaction to expose</div>\r\n  );\r\n};\r\n\r\nexport default Transactions;\r\n","const jsonNoCacheOptions = {\r\n  mode: \"no-origin\",\r\n  headers: {\r\n    Accept: \"application/json\",\r\n    \"Cache-Control\": \"no-cache\"\r\n  }\r\n};\r\n\r\n/**\r\n * Fetch a JSON from a URL.\r\n *\r\n * @example\r\n * fetchJson('/foo/bar').then(json => console.log(json));\r\n *\r\n * @param {String} url - The source URL of the JSON\r\n * @return {Promise} - A promise with the data content\r\n */\r\nexport const fetchJson = url =>\r\n  fetch(url, jsonNoCacheOptions).then(response => response.json());\r\n","import { fetchJson } from \"../helpers\";\r\nimport { TRANSACTIONS_JSON_URL } from \"../constants\";\r\nimport transactions from \"../mock/transactions.json\";\r\n\r\nexport const GET_TRANSACTIONS = \"GET_TRANSACTIONS\";\r\nexport const GET_SELECTED_TRANSACTIONS = \"GET_SELECTED_TRANSACTIONS\";\r\n\r\nexport const getTransactions = transactions => ({\r\n  type: GET_TRANSACTIONS,\r\n  transactions\r\n});\r\n\r\nexport const getSelectedTransactions = selectedTransactions => ({\r\n  type: GET_SELECTED_TRANSACTIONS,\r\n  selectedTransactions\r\n});\r\n\r\nexport const fetchTransactions = () => dispatch =>\r\n  fetchJson(TRANSACTIONS_JSON_URL).then(transactions =>\r\n    dispatch(getTransactions(transactions))\r\n  );\r\n\r\nexport const fetchTransactionsFromLocalMock = () => dispatch =>\r\n  dispatch(getTransactions(transactions));\r\n","export const TRANSACTIONS_JSON_URL = \"https://jsonplaceholder.typicode.com/posts\";\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Transactions from \"./Transactions\";\r\nimport {\r\n  fetchTransactions,\r\n  fetchTransactionsFromLocalMock,\r\n  getSelectedTransactions\r\n} from \"../../actions/transactions\";\r\n\r\nclass TransactionsContainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleRowSelection = this.handleRowSelection.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    // This call does not work due to a cross domain issue\r\n    //this.props.fetchTransactions();\r\n\r\n    // this.props.dispatch(fetchTransactionsFromLocalMock());\r\n    this.props.fetchTransactionsFromLocalMock();\r\n  }\r\n\r\n  handleRowSelection(row) {\r\n    this.props.getSelectedTransactions(row);\r\n  }\r\n\r\n  render() {\r\n    const { transactions } = this.props;\r\n    return (\r\n      <Transactions\r\n        transactions={transactions}\r\n        onSelectOptions={{\r\n          mode: \"radio\",\r\n          clickToSelect: true,\r\n          onSelect: this.handleRowSelection\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  transactions: state.transactions.data\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  getSelectedTransactions: selectedTransactions =>\r\n    dispatch(getSelectedTransactions(selectedTransactions)),\r\n  fetchTransactionsFromLocalMock: () =>\r\n    dispatch(fetchTransactionsFromLocalMock()),\r\n  fetchTransactions: () => dispatch(fetchTransactions())\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(TransactionsContainer);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport \"./TransactionsDetail.css\";\r\n\r\n/**\r\n * TODO : Create a container/dump component\r\n */\r\nclass TransactionsDetail extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      selectedTransactions: []\r\n    };\r\n  }\r\n\r\n  /**\r\n   * TODO : this is to handle multiple row selection logic\r\n   * @param nextProps\r\n   */\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.selectedTransactions !== this.props.selectedTransactions) {\r\n      this.setState({\r\n        selectedTransactions: [\r\n          this.state.selectedTransactions,\r\n          ...nextProps.selectedTransactions\r\n        ]\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { selectedTransactions } = this.props;\r\n    const TransactionsDetailComponent =\r\n      selectedTransactions && selectedTransactions[0].id ? (\r\n        <div className=\"TransactionsDetail__list\">\r\n          {selectedTransactions.map(transaction => (\r\n            <div key={transaction.id} className=\"TransactionsDetail__list-item\">\r\n              {transaction.id}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <div className=\"TransactionsDetail__show-detail\">\r\n          Click on one or several transactions to see details\r\n        </div>\r\n      );\r\n\r\n    return (\r\n      <div className=\"TransactionsDetail\">{TransactionsDetailComponent}</div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  selectedTransactions: [state.selectedTransactions.data]\r\n});\r\n\r\nexport default connect(mapStateToProps)(TransactionsDetail);\r\n","import { GET_TRANSACTIONS } from \"../actions/transactions\";\r\n\r\nconst initialState = {\r\n  data: []\r\n};\r\n\r\nconst transactionsReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_TRANSACTIONS:\r\n      return {\r\n        data: action.transactions[0].transactions\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default transactionsReducer;\r\n","import { GET_SELECTED_TRANSACTIONS } from \"../actions/transactions\";\r\n\r\nconst initialState = {\r\n  data: []\r\n};\r\n\r\nconst transactionsDetailReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_SELECTED_TRANSACTIONS:\r\n      return {\r\n        data: action.selectedTransactions\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default transactionsDetailReducer;\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport transactions from \"./transactions\";\r\nimport selectedTransactions from \"./transactionsDetail\";\r\n\r\nexport default combineReducers({\r\n  transactions,\r\n  selectedTransactions\r\n});\r\n","import configureStore from \"./configureStore\";\r\n\r\nconst initialState = {};\r\n\r\n// The instance of the current store shared in the application.\r\nconst currentStore = configureStore(initialState);\r\n\r\nexport default currentStore;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport reducers from \"../reducers/index\";\r\n\r\nconst configureStore = (initialState = {}) =>\r\n  createStore(reducers, initialState, applyMiddleware(thunk));\r\n\r\nexport default configureStore;\r\n","import React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport currentStore from \"../store/currentStore\";\r\n\r\nconst storeProvider = Component => (\r\n  <Provider store={currentStore}>\r\n    <Component />\r\n  </Provider>\r\n);\r\n\r\nexport default storeProvider;\r\n","import React from \"react\";\r\n\r\nimport Header from \"./components/Header/Header\";\r\nimport Sidebar from \"./components/Sidebar\";\r\nimport Transactions from \"./components/Transactions\";\r\nimport TransactionsDetail from \"./components/TransactionsDetail/TransactionsDetail\";\r\n\r\nimport storeProvider from \"./hoc/storeProvider\";\r\nimport \"./App.css\";\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <main>\r\n          <Sidebar />\r\n          <Transactions />\r\n          <TransactionsDetail />\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default storeProvider(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(App, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}